pipeline {
    agent any

    environment {
            JOB_NAME = "test"
            ARTIFACTORY_URL = "https://artifactory.viasat.com/artifactory/cmob-gen-dev/scm-sslk/system-component-manifest/master/generic_nonwife/system-component-manifest-v"
        }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Checked out the code successfully.'
                sh 'docker --version'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("my-python-app")
                    echo 'Docker image built successfully.'
                }
            }
        }

        stage('Run Application') {
            steps {
                script {
                    def image = docker.image("my-python-app")
                    sh "docker run -d --name my-python-app -p 8888:5000 ${image.id}"
                }

                sleep 10

                echo "Fetching container logs..."
                sh 'docker logs my-python-app || true'

                echo "Checking application health on port 8888..."
                sh 'curl http://localhost:8888 || true'
            }
            post {
                always {
                    echo "Cleaning up..."
                    sh 'docker stop my-python-app || true'
                    sh 'docker rm my-python-app || true'
                }
            }
        }

        stage('Test') {
            steps {
                echo "Simulated test run here."
                // You can add real test commands like:
                // sh 'pytest tests/'
            }
        }
        stage('Get Last Successful Build Number') {
            steps {
                script {
                    def lastSuccessfulBuild = currentBuild.previousSuccessfulBuild
                    if (lastSuccessfulBuild != null) {
                        def buildNumber = lastSuccessfulBuild.number
                        echo "Last successful build number: ${buildNumber}"
                        def jobName = env.JOB_NAME.replaceAll("%2F", "/")
                        // def manifestUrl = "${env.JENKINS_URL}job/${jobName}/${lastSuccessfulBuildNum}/artifact/manifest.json"
                        def ARTIFACTORY_URL = "${env.ARTIFACTORY_URL}/${buildNumber}.json"
                        echo "Artifact URL: ${ARTIFACTORY_URL}"
                    } else {
                        echo "No previous successful build found."
                    }
                }
            }
        }
    }
}